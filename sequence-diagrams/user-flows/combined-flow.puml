@startuml
!function $my_code($fgcolor, $bgcolor)
!return "<color:"+$fgcolor+"><back:"+$bgcolor+"><size:14><b><font:monospaced>"
!endfunction
actor Actor
participant Application as client
participant "Beneficiary Page" as beneficiary
participant "Individual Page" as individual
participant "Household Page" as household
participant "Delivery Page" as delivery
participant Bloc
participant Repository as repository
participant Delivery as delivery_service
participant Individual as individual_service
participant Project as project_service
participant Household as household_service
title View Beneficiary
Actor -> client: onInit
group  View Beneficiary

    autoactivate on


    client -> beneficiary: Client Pushes View Beneficiary Page
    hnote over Bloc : Beneficiary Bloc.
    beneficiary -> Bloc : On entering the name and submit.
    Bloc -> repository : passing the Boundary code and name
    hnote over repository : Beneficiary Repository.

alt project_type=household
    repository -> individual_service : (/individual/v1/_search)  with Boundary code and name
    return List of individuals.

    repository -> household_service : (/household/v1/_search) pass the householdId and get all the household details.
    return render household details to ui

    repository -> household_service : (/household/member/v1/_search) pass the householdId and get all the household members.
    return All household members

    repository --> Bloc: Household members
    Bloc --> beneficiary:  Render UI Members
end

alt project_type=individual 
 repository -> individual_service : (/individual/v1/_search)  with Boundary code and name and filter if the beneficiary belows.
    return List of individuals.
        repository -> household_service: (/household/member/v1/_search) Pass the each individual id and Boundary code to fetch household members and filter with beneficiary ids (houseHold Id).
    return get household member as response and make next api call by passing householdId.
      repository -> household_service : (/household/v1/_search) pass the householdId and get all the household details.
    return render household details to ui

    repository -> household_service : (/household/member/v1/_search) pass the householdId and get all the household members.
    return All household members

    repository --> Bloc: Household members
    Bloc --> beneficiary:  Render UI Members

    autoactivate off
end
newpage Create Individual
Actor -> client: onInit
group  Added New Individual
    autoactivate on
    client -> individual: Client Pushes View Individual Page with household id as path params.
    hnote over Bloc : Registration Bloc.
    individual -> Bloc: Oninit() trigger a function to fetch additional fields.
    Bloc -> client :  get the stored schema data (Additional Fields) + Project details.
    client --> individual: Additional Fields + Project details + household id.
    individual -> Bloc: Enter all the required field details and submit.
    Bloc -> repository : passing the tenant id and fields + household id
    hnote over repository : Individual Repository.
    repository -> individual_service : (/individual/v1/_create) by passing all the field details.
    individual_service -->repository : Details of individual.
    alt project_type=individual
        repository -[#red]>  project_service :  (/project/beneficiary/v1/_create) create project beneficiary
        project_service -[#red]-> repository : Project beneficiary details as response.
    end
    repository -> household : (/household/member/v1/_create) add individual to household as member.
    household -->repository :return household member as response.
    repository --> Bloc : individual details.
    Bloc --> individual : navigate the user to Delivery Screen.
    autoactivate off
end
newpage Household registration
Actor -> client: onInit
group  Added New HouseHold
    autoactivate on
    client -> household: Client Pushes View HouseHold Page
    hnote over Bloc :  Registration Bloc.
    household -> Bloc: Oninit() trigger a function to fetch additional fields.
    Bloc -> client :  get the stored schema data (Additional Fields) + Project details.
    client --> household: Additional Fields + Project details.
    household -> Bloc: Enter all the required field details and submit.
    Bloc -> repository : passing the tenant id and fields
    hnote over repository : House Hold Repository.
    repository -> household_service : (/household/v1/_create) by passing all the field details.
    household_service --> repository :  household details as response.
    repository -> project_service: (/project/beneficiary/v1/_create) create a beneficiary by passing the household details.
    project_service --> repository :  beneficiary details as response.
    repository --> Bloc : (HH + Project Beneficiary) details.
    Bloc --> household : Navigate user to individual page.
    autoactivate off
end
newpage Delivery
Actor -> client: onInit
group  Added New Delivery
    autoactivate on
    client -> delivery: Client Pushes View Delivery Page with household id (or) individual id  as path params.
    hnote over Bloc : delivery Bloc.
    delivery -> Bloc: Oninit() trigger a function to fetch additional fields + project details and .
    Bloc -> client :  get the stored schema data (Additional Fields) + Project details.
    client -->delivery: Additional Fields + Project details + household id (or) individual id.
    delivery -> Bloc: Enter all the required field details and submit.
    Bloc -> repository : passing the tenant id and fields + household id (or) individual id
    hnote over repository : Delivery Repository.
    repository -> project_service : (/project/task/v1/_create)  create a task against the beneficiary.
    project_service --> repository : task details as response.
    repository --> Bloc :  task details.
    Bloc --> delivery : navigate the user to Beneficiary view Screen after showing a toast message.
    autoactivate off
end
@enduml